[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nfrom faicons import icon_svg\n\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.link(rel=\"stylesheet\", href=\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\"),\n        ui.tags.style(\n            \"\"\"\n            table {\n                margin-bottom: 0px !important;\n            }\n            #best_model_rmse{\n                font-size: 24.67px;\n            }\n            .custom-row {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: space-between;\n                gap: 2%;\n            }\n            .custom-col {\n                flex: 1;\n                min-width: 20%;\n                padding-top: 2px;\n                padding-bottom: 2px;\n                font-size: 0.8em;\n            }\n            .custom-col .shiny-input-select {\n                height: 30px;\n                font-size: 0.8em;\n            }\n            .modal-content {\n                border-radius: 0px;\n            }\n            .modal-header, .modal-body, modal-footer {\n                padding: 10px;\n            }\n            .modal-title {\n                font-size: 18px;\n            }\n            .modal-footer .btn {\n                padding: 10px;\n                font-size: 13px;\n                border-radius: 0px;\n            }\n            shiny-data-frame {\n                font-size: 14px;\n            }\n            svg {\n                margin: 0px !important;\n            }\n            body {\n                background-color: rgb(183, 217, 255);\n            }\n            \"\"\"\n        )\n    ),\n    ui.div(\n        class_ = \"ms-Grid-row\",\n        style = \"display: flex; flex-wrap: wrap; height:10px;\"\n    ),\n    ui.div(\n        ui.div(\n            ui.div(\n                ui.div(\"Upload\", style = \"font-size: 12.67px;\"),\n                ui.input_action_button(\n                    \"uploadButton\",\n                    \"\",\n                    class_ = \"btn-primary\",\n                    style = \"height: 32px; padding: 0;\",\n                    icon = ui.tags.div(\n                        icon_svg(\"upload\"),\n                        style=\"display: flex; align-items: center; justify-content: center;\"\n                    )\n                ),\n                ui.input_file(\"buttonUpload\", \"\", accept=[\".json\"]),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; border-radius: 0px; height: 151px;\"\n            ),\n            class_ = \"ms-Grid-col ms-sm12 ms-lg6 ms-xl1\"\n        ),\n        ui.div(\n            class_ = \"ms-Grid-col ms-sm12 ms-hiddenLgUp\",\n            style = \"height:10px;\"\n            ),\n        ui.div(\n            ui.div(\n                ui.div(\"Best model parameters:\", style = \"font-size: 12.67px;\"),\n                ui.output_data_frame(\"best_model_table\"),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px;  border-radius: 0px; height: 151px;\"\n            ),\n            class_ = \"ms-Grid-col ms-sm12 ms-lg6\"\n        ),\n        ui.div(\n            class_ = \"ms-Grid-col ms-sm12 ms-lg12 ms-hiddenXlUp\",\n            style = \"height:10px;\"\n            ),\n        ui.div(\n            ui.div(\n                ui.div(\"Average RMSE\", style = \"font-size: 18px;\"),\n                ui.output_text(\n                    \"best_model_rmse\"\n                ),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; height: 95px;  border-radius: 0px; height: 151px;\"\n            ),\n            class_ = \"ms-Grid-col ms-sm12 ms-lg4 ms-xl2\"\n        ),\n        ui.div(\n            class_ = \"ms-Grid-col ms-sm12 ms-hiddenLgUp\",\n            style = \"height:10px;\"\n            ),\n        ui.div(\n            ui.div(\n                ui.div(\"Modals:\", style = \"font-size: 12.67px;\"),\n                ui.tags.br(),\n                ui.div(\n                    ui.input_action_button(\n                        \"table_all_models\",\n                        \"\",\n                        style = \"height: 32px; padding: 0; border: none;\",\n                        class_ = \"custom-col\",\n                        icon = icon_svg(\"table\"),\n                        title = \"See a table of models results\"\n                    ),\n                    ui.div(class_ = \"custom-col\"),\n                    ui.input_action_button(\n                        \"heat_map\",\n                        \"\",\n                        style = \"height: 32px; padding: 0; border: none;\",\n                        class_ = \"custom-col\",\n                        icon = icon_svg(\"grip\"),\n                        title = \"See parameters heatmap\"\n                    ),\n                    class_ = \"custom-row\"    \n                ),                \n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; height: 95px; border-radius: 0px; height: 151px;\"\n            ),\n            class_ = \"ms-Grid-col ms-sm12 ms-lg4 ms-xl1\"\n        ),\n        ui.div(\n            class_ = \"ms-Grid-col ms-sm12 ms-hiddenLgUp\",\n            style = \"height:10px;\"\n            ),\n        ui.div(\n            ui.div(\n                ui.tags.a(\n                    ui.tags.img(\n                        src = \"https://raw.githubusercontent.com/davidrsch/LSTM_UTS/main/logo.png\",\n                        height = \"95\"\n                    ),\n                    href = \"\"\n                ),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; height: 151px; display: flex; align-items: center; justify-content: center; border-radius: 0px;\"\n            ),\n            class_ = \"ms-Grid-col ms-sm12 ms-lg4 ms-xl2\"\n        ),\n        class_ = \"ms-Grid-row\",\n        style = \"display: flex; flex-wrap: wrap;\"\n    ),\n    ui.div(\n        class_ = \"ms-Grid-row\",\n        style = \"display: flex; flex-wrap: wrap; height:10px;\"\n    ),\n    ui.div(\n        ui.div(\n            ui.div(\n                ui.div(\"Predictions behaviour:\", style = \"font-size:12.67px\"),\n                ui.div(\n                    ui.div(\n                        ui.input_select(\n                            \"transfo\",\n                            \"Transformation\",\n                            choices = [], # This will be populated in server\n                        ),\n                    class_ = \"custom-col\"\n                    ),\n                    ui.div(\n                        ui.input_select(\n                            \"scales\",\n                            \"Scales\",\n                            choices = [],\n                        ),\n                        class_=\"custom-col\"\n                    ),\n                    ui.div(\n                        ui.input_select(\n                            \"inp_amount\",\n                            \"Inputs\",\n                            choices = [],\n                        ),\n                        class_ = \"custom-col\"\n                    ),\n                    ui.div(\n                        ui.input_select(\n                            \"lstm\",\n                            \"LSTM\",\n                            choices = [],\n                        ),\n                        class_=\"custom-col\"\n                    ),\n                    class_ = \"custom-row\"\n                ),\n                ui.output_plot(\"predictions_plot\"),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; border-radius: 0px;\"\n            ),\n            class_ = \"ms-Grid-col ms-lg12 ms-xl6\"\n        ),\n        ui.div(\n            class_ = \"ms-Grid-col ms-lg12 ms-hiddenXlUp\",\n            style = \"height:10px;\"\n            ),\n        ui.div(\n            ui.div(\n                ui.div(\n                    ui.div(\"RMSE by parameter:\", style = \"font-size:12.67px\"),\n                    ui.div(class_=\"custom-col\"),\n                    ui.div(\n                        ui.input_select(\n                            \"parameter\",\n                            \"Parameter:\",\n                            choices = [\"transformations\",\"scales\",\"inp_amount\",\"lstm\"],\n                        ),\n                        class_=\"custom-col\"\n                    ),\n                    class_ = \"custom-row\"\n                ),\n                ui.output_plot(\"parameters_rmse\"),\n                class_ = \"card ms-depth-8\",\n                style = \"padding: 22px; border-radius: 0px;\"\n            ),\n            class_ = \"ms-Grid-col ms-lg12 ms-xl6\"\n        ),\n        class_ = \"ms-Grid-row\",\n        style = \"display: flex; flex-wrap: wrap;\"\n    ),\n    ui.tags.script(\n        \"\"\"\n        $(document).on(\"click\", \"#uploadButton\", function() {\n            $(\"#buttonUpload\").click();\n        });\n        \"\"\"\n    ),\n    ui.tags.script(\n        \"\"\"\n        const inputFile = document.querySelector('.form-group:has(#buttonUpload)');\n        inputFile.style.display = 'none';\n        \"\"\"\n    ) \n)\n\ndef server(input, output, session):\n    file_data = reactive.Value(None)\n\n    @reactive.Calc\n    def best_model_json():\n        file_info = input.buttonUpload()\n        if file_info is not None and file_info[0]['datapath']:\n            with open(file_info[0]['datapath'], 'r') as file:\n                data = json.load(file)\n                df = pd.DataFrame(data)\n                df = df.sort_values('rmse')\n                columns_to_drop = ['horizon', 'epoch', 'tests_results']\n                df = df[[col for col in df.columns if col not in columns_to_drop]]\n                df = df.head(1)\n                if 'transformations' in df.columns:\n                    df = df.rename(columns={'transformations': 'tranfo'})\n                return df\n        return None\n\n    @output\n    @render.data_frame\n    def best_model_table():\n        data = best_model_json()\n        if data is None:\n            return None\n        columns_to_drop = ['rmse']\n        data = data[[col for col in data.columns if col not in columns_to_drop]]\n        return render.DataGrid(data, filters=False)\n\n    @output\n    @render.text\n    def best_model_rmse():\n        data = best_model_json()\n        if data is None:\n            return \"No data\"\n        return f\"{data['rmse'].iloc[0]:.4f}\"\n\n    @reactive.Effect\n    @reactive.event(input.buttonUpload)\n    def _():\n        file_info = input.buttonUpload()\n        if file_info is not None and file_info[0]['datapath']:\n            with open(file_info[0]['datapath'], 'r') as file:\n                data = json.load(file)\n                data = pd.DataFrame(data)\n                file_data.set(data)\n            best_data = best_model_json()\n\n            unique_transfo = list(set(data['transformations']))\n            ui.update_select(\"transfo\", choices = unique_transfo)\n            \n            unique_scales = list(set(data['scales']))\n            ui.update_select(\"scales\", choices = unique_scales)\n\n            unique_inp_amount = list(set(data['inp_amount']))\n            ui.update_select(\"inp_amount\", choices = unique_inp_amount)\n\n            unique_lstm = list(set(data['lstm']))\n            ui.update_select(\"lstm\", choices = unique_lstm)\n\n    @output\n    @render.plot\n    def predictions_plot():\n        if all(input[select_id]() for select_id in [\"transfo\", \"scales\", \"inp_amount\", \"lstm\"]):\n            data = file_data()\n            if data is None:\n                return None\n\n            df = pd.DataFrame(data)\n            plot_data = df[\n                (df['transformations'].astype(str) == input.transfo()) &\n                (df['scales'].astype(str) == input.scales()) &\n                (df['inp_amount'].astype(str) == input.inp_amount()) &\n                (df['lstm'].astype(str) == input.lstm())\n            ]\n\n            if plot_data.empty:\n                fig, ax = plt.subplots()\n                ax.text(0.5, 0.5, \"Couldn't find any model\\n with these parameters\",\n                        ha='center', va='center', fontsize=12, color='blue')\n                ax.set_xlim(0, 1)\n                ax.set_ylim(0, 1)\n                ax.axis('off')\n                return fig\n\n            test_results = pd.DataFrame(plot_data['tests_results'].iloc[0])\n            \n            test_cols = [col for col in test_results.columns if col.startswith('test_')]\n            test_results['min'] = test_results[test_cols].min(axis=1)\n            test_results['min_5'] = test_results[test_cols].quantile(0.05, axis=1)\n            test_results['mean'] = test_results[test_cols].mean(axis=1)\n            test_results['max_95'] = test_results[test_cols].quantile(0.95, axis=1)\n            test_results['max'] = test_results[test_cols].max(axis=1)\n            test_results['sd'] = test_results[test_cols].std(axis=1)\n\n            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), gridspec_kw={'height_ratios': [3, 1]})\n\n            ax1.fill_between(test_results.index, test_results['min'], test_results['min_5'], alpha=0.3, color='blue')\n            ax1.fill_between(test_results.index, test_results['max'], test_results['max_95'], alpha=0.3, color='blue')\n            ax1.fill_between(test_results.index, test_results['min_5'], test_results['max_95'], alpha=0.6, color='blue')\n            ax1.plot(test_results.index, test_results['mean'], color='blue', linestyle='dashed', label='Predicted (mean)')\n            ax1.plot(test_results.index, test_results['max'], color='blue')\n            ax1.plot(test_results.index, test_results['min'], color='blue')\n            ax1.plot(test_results.index, test_results['max_95'], color='blue')\n            ax1.plot(test_results.index, test_results['min_5'], color='blue', label='Predicted')\n            ax1.plot(test_results.index, test_results['value'], color='green', label='Real')\n            ax1.set_ylabel('Predicted and Real values')\n            ax1.legend()\n\n            ax2.plot(test_results.index, test_results['sd'], color='black', label='Predictions Standard deviation')\n            ax2.set_xlabel('Sequence')\n            ax2.set_ylabel('SD')\n            ax2.legend()\n\n            plt.tight_layout()\n            return fig\n        \n    @output\n    @render.plot\n    @reactive.Calc\n    def parameters_rmse():\n        if not input.parameter() or file_data() is None:\n            return None\n\n        data = file_data()\n        df = pd.DataFrame(data)\n        plot_data = df[[input.parameter(), 'rmse']]\n        plot_data.columns = ['parameter', 'RMSE']\n        \n        fig, ax = plt.subplots()\n        \n        unique_params = plot_data['parameter'].unique()\n        \n        if len(unique_params) == 1:\n            # If there's only one unique parameter value, create a single box plot\n            ax.boxplot(plot_data['RMSE'].values)\n            ax.set_xticklabels([unique_params[0]])\n        else:\n            # If there are multiple parameter values, create a box plot for each\n            ax.boxplot([group['RMSE'].values for name, group in plot_data.groupby('parameter')])\n            ax.set_xticklabels(unique_params)\n        \n        ax.set_ylabel('RMSE')\n        ax.set_xlabel(input.parameter())\n        \n        return fig\n\n    @reactive.Effect\n    @reactive.event(input.table_all_models)\n    def all_models_modal():\n        ui.modal_show(ui.modal(\n            ui.output_data_frame(\"all_models_results\"),\n            title = \"All Models Results\",\n            easy_close = True,\n            size = \"l\",\n            footer = ui.modal_button(\"Close\")\n        ))\n    \n    @output\n    @render.data_frame\n    def all_models_results():\n        data = file_data()\n        df = pd.DataFrame(data)\n        table = df.drop(columns=['horizon', 'epoch', 'tests_results'])\n        table = table.rename(columns={'transformations': 'tranfo'})\n        return render.DataGrid(table, filters=True)\n\n    @reactive.Effect\n    @reactive.event(input.heat_map)\n    def heat_map_modal():\n        ui.modal_show(ui.modal(\n            ui.div(\n                ui.div(\"Select parameters:\", style = \"font-size:12.67px\"),\n                ui.div(class_ = \"custom-col\"),\n                ui.div(\n                    ui.input_select(\n                        \"x_axis\",\n                        \"X_axis:\",\n                        choices = [\"transformations\",\"scales\",\"inp_amount\",\"lstm\"],\n                    ),\n                    class_ = \"custom-col\",\n                    style = \"min-width: 140px\"\n                ),\n                ui.div(\n                    ui.input_select(\n                        \"y_axis\",\n                        \"Y_axis:\",\n                        choices = [\"transformations\",\"scales\",\"inp_amount\",\"lstm\"],\n                    ),\n                    class_ = \"custom-col\",\n                    style = \"min-width: 140px\"\n                ),\n                class_ = \"custom-row\"\n            ),\n            ui.tags.br(),\n            ui.output_plot(\"heat_map_plot\"),\n            title = \"Heat map:\",\n            easy_close = True,\n            size = \"l\",\n            footer = ui.modal_button(\"Close\")\n        ))\n\n    @output\n    @render.plot\n    def heat_map_plot():\n        data = file_data()\n        df = pd.DataFrame(data)\n        \n        if input.x_axis() == input.y_axis():\n            fig, ax = plt.subplots(figsize=(10, 6))\n            ax.text(0.5, 0.5, \"Please select different axes\", \n                    ha='center', va='center', fontsize=20)\n            ax.axis('off')\n            return fig\n        \n        fig, ax = plt.subplots(figsize=(10, 6))\n        \n        # Create a pivot table for the heatmap\n        pivot_table = pd.pivot_table(df, \n                                     values='rmse', \n                                     index=input.y_axis(), \n                                     columns=input.x_axis(), \n                                     aggfunc='first')\n        \n        # Create the heatmap with a blue color palette\n        sns.heatmap(pivot_table, ax=ax, cmap='Blues', annot=True, fmt='.2f')\n        \n        ax.set_ylabel(input.y_axis())\n        ax.set_xlabel(input.x_axis())\n        ax.set_title('RMSE Heatmap')\n        \n        return fig\n\napp = App(ui = app_ui, server = server)", "type": "text"}]